name: Publish to NPM and Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test
    
    - name: Run build
      run: npm run build
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify package version matches tag
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
          exit 1
        fi
        echo "Version verification passed: $PACKAGE_VERSION"
    
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's New" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Initial release of MarkdownForge v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Features" >> $GITHUB_OUTPUT
          echo "- Convert Markdown to PDF and DOCX formats" >> $GITHUB_OUTPUT
          echo "- Support for Mermaid diagrams" >> $GITHUB_OUTPUT
          echo "- Admonitions and callouts support" >> $GITHUB_OUTPUT
          echo "- CLI tool for easy document conversion" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | head -20 >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MarkdownForge v${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
    
    - name: Notify success
      run: |
        echo "‚úÖ Successfully published MarkdownForge v${{ steps.get_version.outputs.VERSION }} to NPM"
        echo "‚úÖ GitHub release created"
        echo "üì¶ Package: https://www.npmjs.com/package/markdownforge"
        echo "üè∑Ô∏è Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"

  post-publish:
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Update documentation badges
      if: needs.publish.result == 'success'
      run: |
        echo "üìù Consider updating documentation with new version badges"
        echo "üîÑ Documentation site will be updated automatically if configured"
    
    - name: Notify on failure
      if: needs.publish.result == 'failure'
      run: |
        echo "‚ùå Publication failed. Please check the logs and try again."
        echo "üîç Common issues:"
        echo "  - NPM_TOKEN secret not configured"
        echo "  - Version in package.json doesn't match tag"
        echo "  - Tests failing"
        echo "  - Package name already exists"